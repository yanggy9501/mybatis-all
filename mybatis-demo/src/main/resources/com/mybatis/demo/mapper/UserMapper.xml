<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.demo.mapper.UserMapper">

    <!--
        开启缓存 (分开关)
         type: 缓存实现类，默认 PERPETUAL
         eviction: 淘汰策略
         size：缓存大小
         flushInterval：缓存刷新时间
     -->
    <cache
            eviction="LRU"
            size="512"
            flushInterval="60000"
            readOnly="true"/>

    <!-- 即当前命名空间可以访问某命名空间的缓存 -->
    <!--<cache-ref namespace="其他mapper.xml 的命名空间"/>-->

    <!-- Mybatis 是如何将 sql 执行结果封装为目标对象并返回的？都有哪些映射形式？-->
    <resultMap id="result" type="com.mybatis.demo.entity.User">
        <!-- 每一条就是一个 resultMapping -->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="roles" jdbcType="VARCHAR" property="roles" typeHandler="com.mybatis.demo.handler.StringWithCommaToListTypeHandler"/>
        <result column="create_time" jdbcType="DATE" property="createTime"/>
        <!--<collection property="" select=""-->
    </resultMap>

    <!--
        每个 insert|select 等标签就是一个 SqlSource，标签-sqlNode， 下面DynamicSqlSource：动态sql:主要是封装动态SQL标签解析之后的SQL语句和带有${}的SQL语句
        解析完成封装成 MappedStatement，其包含所有信息
    -->
    <!--
        timeout：单位毫秒
    -->
    <insert id="insert" useGeneratedKeys="true"
            timeout="1000">
        -- 文本 TextSqlNode
        insert into `user` values (null, #{username}, #{roles, typeHandler=com.mybatis.demo.handler.StringWithCommaToListTypeHandler},#{createTime})
    </insert>

    <select id="selectById" resultMap="result"  >
        select id, username, roles, create_time from user
        <!--        <ifxxx >... 随意标签在解析时会报错，因为找不到该标签处理器 </ifxxx>-->
        <where>
            <if test="id > 0">
                and id=#{id}
            </if>
        </where>
    </select>

    <!-- sql 片段 -->
    <sql id="userFiledSql">
        id, username, roles, create_time <!--、${<properties解析到的内容>}-->
    </sql>

    <!--
        若在 mybatis-config.xml 中添加
        <property name="sqlKey1" value="userFiledSql"/>
    -->
    <select id="selectById2" resultMap="result"  >
        select
<!--        &#45;&#45; 可以使用占位符号               <include refid="${sqlKey1}" />-->
<!--        &#45;&#45; 可以使用其他mapper.xml 中的    <include refid="otherNamespace.sqlId1" />-->
        <!--可以使用其他mapper.xml 中的-->
        <!--        <include refid="${otherNamespace}.sqlId1">-->
        <!--            <k1 value="v1" ${otherNamespace}可以去标签的value值 />-->
        <!--            <k2 value="v2" />-->
        <!--        </include>-->
        --             <include refid="userFiledSql" />
        from user
        <where>
            <if test="id > 0">
                and id=#{id}
            </if>
        </where>
    </select>


    <!--
      动态sql数据源  需要在调用crud 解析sql
      静态sql数据源        解析CURD节点的就会把sql解析好

      1  select id,user_name,create_time from t_user where id=1   动态

      2  select id,user_name,create_time from t_user where id= ?   静态

      3  select id,user_name,create_time from t_user
      <where>
         <if test="id>0">
         and id=${id}
         </if>
      </where>
      动态
    -->
</mapper>
